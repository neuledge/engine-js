import { TokenCursor } from '@/tokens';
import { parseDocumentNode, DocumentNode } from './document';

/* eslint-disable max-lines-per-function */

describe('nodes/document', () => {
  describe('parseDocumentNode()', () => {
    it('should parse empty file', () => {
      const cursor = new TokenCursor(``);

      expect(parseDocumentNode(cursor)).toEqual<DocumentNode>({
        type: 'Root',
        start: 0,
        end: 0,
        body: [],
      });
      expect(cursor.index).toBe(0);
    });

    it('should parse state', () => {
      const cursor = new TokenCursor(
        `
      state Foo {
        bar: Int = 4
      }`,
      );

      expect(parseDocumentNode(cursor)).toMatchObject({
        type: 'Root',
        start: 7,
        end: 47,
        body: [{ type: 'State', id: { type: 'Identifier', name: 'Foo' } }],
      });
      expect(cursor.index).toBe(9);
    });

    it('should parse multiple states', () => {
      const cursor = new TokenCursor(
        `
      state Foo {
        foo: Int = 1
      }

      state Bar {
        bar: Int = 1
      }`,
      );

      expect(parseDocumentNode(cursor)).toMatchObject({
        type: 'Root',
        start: 7,
        end: 95,
        body: [
          { type: 'State', id: { type: 'Identifier', name: 'Foo' } },
          { type: 'State', id: { type: 'Identifier', name: 'Bar' } },
        ],
      });
      expect(cursor.index).toBe(18);
    });

    it('should parse either', () => {
      const cursor = new TokenCursor(
        `
      either Foo = Bar | Baz`,
      );

      expect(parseDocumentNode(cursor)).toMatchObject({
        type: 'Root',
        start: 7,
        end: 29,
        body: [
          {
            type: 'Either',
            id: { type: 'Identifier', name: 'Foo' },
            states: [
              { type: 'Identifier', name: 'Bar' },
              { type: 'Identifier', name: 'Baz' },
            ],
          },
        ],
      });
      expect(cursor.index).toBe(6);
    });

    it('should parse mutation', () => {
      const cursor = new TokenCursor(
        `
        create(
          name: String
          description?: String
        ): Category => {
          id: AutoGenerated(),
          name,
          description,
        }`,
      );

      expect(parseDocumentNode(cursor)).toMatchObject({
        type: 'Root',
        start: 9,
        end: 175,
        body: [
          {
            type: 'Mutation',
            key: { type: 'Identifier', name: 'create' },
            parameters: [
              {
                type: 'Parameter',
                key: { type: 'Identifier', name: 'name' },
                parameterType: {
                  type: 'TypeExpression',
                  identifier: { type: 'Identifier', name: 'String' },
                },
              },
              {
                type: 'Parameter',
                key: { type: 'Identifier', name: 'description' },
                parameterType: {
                  type: 'TypeExpression',
                  identifier: { type: 'Identifier', name: 'String' },
                },
                nullable: true,
              },
            ],
            returns: { type: 'Identifier', name: 'Category' },
            from: undefined,
            body: [
              {
                type: 'Property',
                key: { type: 'Identifier', name: 'id' },
                value: {
                  type: 'CallExpression',
                  callee: { type: 'Identifier', name: 'AutoGenerated' },
                  arguments: [],
                },
              },
              {
                type: 'Property',
                key: { type: 'Identifier', name: 'name' },
                value: { type: 'Identifier', name: 'name' },
              },
              {
                type: 'Property',
                key: { type: 'Identifier', name: 'description' },
                value: { type: 'Identifier', name: 'description' },
              },
            ],
          },
        ],
      });
      expect(cursor.index).toBe(25);
    });
  });
});
